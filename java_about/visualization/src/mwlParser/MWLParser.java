
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Aug 02 13:09:14 MEST 2005
//----------------------------------------------------

package mwlParser;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.10k generated parser.
  * @version Tue Aug 02 13:09:14 MEST 2005
  */
public class MWLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MWLParser() {super();}

  /** Constructor which sets the default scanner. */
  public MWLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\003\005\000\002\002\004\000\002\003" +
    "\003\000\002\005\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\011\000\002\005\007\000" +
    "\002\005\007\000\002\005\011\000\002\011\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\010\000\002\016\012\000\002\016\003\000" +
    "\002\016\003\000\002\017\006\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\007" +
    "\000\002\010\012\000\002\010\012\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\004\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\014\034\016\035\011\041\005\043\006\054" +
    "\015\001\002\000\020\002\uffe4\012\uffe4\013\uffe4\024\uffe4" +
    "\026\uffe4\037\uffe4\040\uffe4\001\002\000\016\004\107\045" +
    "\023\046\025\053\022\054\030\055\021\001\002\000\004" +
    "\004\140\001\002\000\020\002\uffff\012\136\013\uffff\024" +
    "\uffff\026\uffff\037\uffff\040\uffff\001\002\000\004\002\135" +
    "\001\002\000\016\004\107\045\023\046\025\053\022\054" +
    "\030\055\021\001\002\000\006\014\062\015\061\001\002" +
    "\000\020\002\ufffb\012\ufffb\013\ufffb\024\ufffb\026\ufffb\037" +
    "\ufffb\040\ufffb\001\002\000\020\002\uffe3\012\uffe3\013\uffe3" +
    "\024\uffe3\026\uffe3\037\uffe3\040\uffe3\001\002\000\010\006" +
    "\045\014\ufff6\015\ufff6\001\002\000\020\002\ufffe\012\ufffe" +
    "\013\ufffe\024\ufffe\026\ufffe\037\ufffe\040\ufffe\001\002\000" +
    "\004\014\020\001\002\000\016\004\031\045\023\046\025" +
    "\053\022\054\030\055\021\001\002\000\056\002\ufff2\005" +
    "\ufff2\007\ufff2\012\ufff2\013\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\042\ufff2\001\002\000\004\010\051\001\002\000\056\002" +
    "\ufff1\005\ufff1\007\ufff1\012\ufff1\013\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\042\ufff1\001\002\000\056\002\ufff5\005\ufff5\007" +
    "\ufff5\012\ufff5\013\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5" +
    "\001\002\000\056\002\ufff0\005\ufff0\007\ufff0\012\ufff0\013" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\001\002\000\056" +
    "\002\uffeb\005\uffeb\007\uffeb\012\uffeb\013\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\001\002\000\032\002\ufffc\012\ufffc" +
    "\013\ufffc\017\037\020\040\021\042\022\034\023\041\024" +
    "\ufffc\026\ufffc\037\ufffc\040\ufffc\001\002\000\062\002\ufff6" +
    "\005\ufff6\006\045\007\ufff6\012\ufff6\013\ufff6\016\044\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\042\ufff6\001\002\000\016\004\031" +
    "\045\023\046\025\053\022\054\030\055\021\001\002\000" +
    "\056\002\uffec\005\uffec\007\uffec\012\uffec\013\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\001\002\000\016\005\035\017" +
    "\037\020\040\021\042\022\034\023\041\001\002\000\016" +
    "\004\uffe6\045\uffe6\046\uffe6\053\uffe6\054\uffe6\055\uffe6\001" +
    "\002\000\056\002\ufff3\005\ufff3\007\ufff3\012\ufff3\013\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\042\ufff3\001\002\000\016\004" +
    "\031\045\023\046\025\053\022\054\030\055\021\001\002" +
    "\000\016\004\uffe9\045\uffe9\046\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\001\002\000\016\004\uffe8\045\uffe8\046\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\001\002\000\016\004\uffe5\045\uffe5\046" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\001\002\000\016\004\uffe7" +
    "\045\uffe7\046\uffe7\053\uffe7\054\uffe7\055\uffe7\001\002\000" +
    "\056\002\ufff4\005\ufff4\007\ufff4\012\ufff4\013\ufff4\017\037" +
    "\020\040\021\042\022\034\023\041\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\042\ufff4\001\002\000\004\044\050\001" +
    "\002\000\016\004\031\045\023\046\025\053\022\054\030" +
    "\055\021\001\002\000\016\007\047\017\037\020\040\021" +
    "\042\022\034\023\041\001\002\000\060\002\uffea\005\uffea" +
    "\007\uffea\012\uffea\013\uffea\014\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\036\uffea\037\uffea\040" +
    "\uffea\042\uffea\001\002\000\056\002\uffef\005\uffef\007\uffef" +
    "\012\uffef\013\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\036\uffef\037\uffef\040\uffef\042\uffef\001" +
    "\002\000\004\054\052\001\002\000\004\013\053\001\002" +
    "\000\004\055\054\001\002\000\006\011\055\015\056\001" +
    "\002\000\056\002\uffee\005\uffee\007\uffee\012\uffee\013\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\036\uffee\037\uffee\040\uffee\042\uffee\001\002\000\004\055" +
    "\057\001\002\000\004\011\060\001\002\000\056\002\uffed" +
    "\005\uffed\007\uffed\012\uffed\013\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\036\uffed\037\uffed\040" +
    "\uffed\042\uffed\001\002\000\006\047\066\050\065\001\002" +
    "\000\016\004\031\045\023\046\025\053\022\054\030\055" +
    "\021\001\002\000\032\002\ufffd\012\ufffd\013\ufffd\017\037" +
    "\020\040\021\042\022\034\023\041\024\ufffd\026\ufffd\037" +
    "\ufffd\040\ufffd\001\002\000\006\006\070\015\067\001\002" +
    "\000\006\006\uffde\015\uffde\001\002\000\006\006\uffdf\015" +
    "\uffdf\001\002\000\006\051\076\052\100\001\002\000\006" +
    "\054\073\055\072\001\002\000\004\007\101\001\002\000" +
    "\004\007\074\001\002\000\004\007\ufff6\001\002\000\004" +
    "\015\075\001\002\000\006\051\076\052\100\001\002\000" +
    "\020\002\uffdd\012\uffdd\013\uffdd\024\uffdd\026\uffdd\037\uffdd" +
    "\040\uffdd\001\002\000\020\002\uffe1\012\uffe1\013\uffe1\024" +
    "\uffe1\026\uffe1\037\uffe1\040\uffe1\001\002\000\020\002\uffdc" +
    "\012\uffdc\013\uffdc\024\uffdc\026\uffdc\037\uffdc\040\uffdc\001" +
    "\002\000\004\015\102\001\002\000\006\051\076\052\100" +
    "\001\002\000\020\002\uffe0\012\uffe0\013\uffe0\024\uffe0\026" +
    "\uffe0\037\uffe0\040\uffe0\001\002\000\020\002\uffe2\012\uffe2" +
    "\013\uffe2\024\uffe2\026\uffe2\037\uffe2\040\uffe2\001\002\000" +
    "\030\017\037\020\040\021\042\022\034\023\041\024\124" +
    "\025\122\026\121\027\125\030\117\031\123\001\002\000" +
    "\010\032\113\033\114\036\127\001\002\000\016\004\107" +
    "\045\023\046\025\053\022\054\030\055\021\001\002\000" +
    "\032\005\035\017\037\020\040\021\042\022\034\023\041" +
    "\024\124\025\122\026\121\027\125\030\117\031\123\001" +
    "\002\000\010\005\112\032\113\033\114\001\002\000\014" +
    "\005\uffda\032\uffda\033\uffda\036\uffda\042\uffda\001\002\000" +
    "\016\004\107\045\023\046\025\053\022\054\030\055\021" +
    "\001\002\000\016\004\107\045\023\046\025\053\022\054" +
    "\030\055\021\001\002\000\014\005\uffd8\032\113\033\uffd8" +
    "\036\uffd8\042\uffd8\001\002\000\014\005\uffd9\032\uffd9\033" +
    "\uffd9\036\uffd9\042\uffd9\001\002\000\016\004\uffd3\045\uffd3" +
    "\046\uffd3\053\uffd3\054\uffd3\055\uffd3\001\002\000\016\004" +
    "\031\045\023\046\025\053\022\054\030\055\021\001\002" +
    "\000\016\004\uffd5\045\uffd5\046\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\001\002\000\016\004\uffd6\045\uffd6\046\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\001\002\000\016\004\uffd2\045\uffd2\046" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\016\004\uffd7" +
    "\045\uffd7\046\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000" +
    "\016\004\uffd4\045\uffd4\046\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\001\002\000\026\005\uffdb\017\037\020\040\021\042\022" +
    "\034\023\041\032\uffdb\033\uffdb\036\uffdb\042\uffdb\001\002" +
    "\000\014\034\016\035\011\041\005\043\006\054\015\001" +
    "\002\000\006\037\131\040\132\001\002\000\014\034\016" +
    "\035\011\041\005\043\006\054\015\001\002\000\020\002" +
    "\ufff9\012\ufff9\013\ufff9\024\ufff9\026\ufff9\037\ufff9\040\ufff9" +
    "\001\002\000\004\040\134\001\002\000\020\002\ufffa\012" +
    "\ufffa\013\ufffa\024\ufffa\026\ufffa\037\ufffa\040\ufffa\001\002" +
    "\000\004\002\000\001\002\000\014\034\016\035\011\041" +
    "\005\043\006\054\015\001\002\000\016\002\001\013\001" +
    "\024\001\026\001\037\001\040\001\001\002\000\014\034" +
    "\016\035\011\041\005\043\006\054\015\001\002\000\004" +
    "\024\142\001\002\000\014\034\016\035\011\041\005\043" +
    "\006\054\015\001\002\000\006\013\147\026\uffd0\001\002" +
    "\000\004\026\145\001\002\000\004\005\146\001\002\000" +
    "\020\002\ufff7\012\ufff7\013\ufff7\024\ufff7\026\ufff7\037\ufff7" +
    "\040\ufff7\001\002\000\014\034\016\035\011\041\005\043" +
    "\006\054\015\001\002\000\004\026\uffd1\001\002\000\010" +
    "\032\113\033\114\042\152\001\002\000\014\034\016\035" +
    "\011\041\005\043\006\054\015\001\002\000\004\040\154" +
    "\001\002\000\020\002\ufff8\012\ufff8\013\ufff8\024\ufff8\026" +
    "\ufff8\037\ufff8\040\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\020\003\007\005\006\006\012\007\003\010" +
    "\013\011\011\017\016\001\001\000\002\001\001\000\014" +
    "\011\025\012\104\013\150\016\023\017\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\025\012\104\013\105\016\023\017\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\025\012\026\016\023\017\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\035\001\001" +
    "\000\002\001\001\000\012\011\025\012\032\016\023\017" +
    "\031\001\001\000\002\001\001\000\004\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\025\012" +
    "\042\016\023\017\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\035\001\001\000\002\001\001\000\012\011\025\012\045" +
    "\016\023\017\031\001\001\000\004\014\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\063\001\001\000\012\011\025\012\062\016" +
    "\023\017\031\001\001\000\004\014\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\103\001\001\000\004\011\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\035" +
    "\015\117\001\001\000\002\001\001\000\014\011\025\012" +
    "\107\013\110\016\023\017\031\001\001\000\006\014\035" +
    "\015\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\025\012\104\013\115\016\023\017\031\001\001" +
    "\000\014\011\025\012\104\013\114\016\023\017\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\025\012\125\016\023\017\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\035\001\001\000" +
    "\020\003\127\005\006\006\012\007\003\010\013\011\011" +
    "\017\016\001\001\000\002\001\001\000\020\003\132\005" +
    "\006\006\012\007\003\010\013\011\011\017\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\136\005\006\006\012\007\003" +
    "\010\013\011\011\017\016\001\001\000\002\001\001\000" +
    "\020\003\140\005\006\006\012\007\003\010\013\011\011" +
    "\017\016\001\001\000\002\001\001\000\022\003\142\004" +
    "\143\005\006\006\012\007\003\010\013\011\011\017\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\142\004\147\005\006" +
    "\006\012\007\003\010\013\011\011\017\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\152\005\006" +
    "\006\012\007\003\010\013\011\011\017\016\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MWLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MWLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MWLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MWLParser$actions {
  private final MWLParser parser;

  /** Constructor */
  CUP$MWLParser$actions(MWLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MWLParser$do_action(
    int                        CUP$MWLParser$act_num,
    java_cup.runtime.lr_parser CUP$MWLParser$parser,
    java.util.Stack            CUP$MWLParser$stack,
    int                        CUP$MWLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MWLParser$result;

      /* select the action based on the action number */
      switch (CUP$MWLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // progVector ::= program 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new ProgramVector((Program) p); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(2/*progVector*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // progVector ::= program COMMA progVector 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object pv = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new ProgramVector((Program) p, (ProgramVector) pv); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(2/*progVector*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compOp ::= NOT_EQUAL 
            {
              Object RESULT = null;
		 RESULT = new NotEqual(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compOp ::= EQUAL_EQUAL 
            {
              Object RESULT = null;
		 RESULT = new EqualEqual(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // compOp ::= GREATER_EQUAL 
            {
              Object RESULT = null;
		 RESULT = new GreaterEqual(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compOp ::= GREATER 
            {
              Object RESULT = null;
		 RESULT = new Greater(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compOp ::= LESS_EQUAL 
            {
              Object RESULT = null;
		 RESULT = new LessEqual(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compOp ::= LESS 
            {
              Object RESULT = null;
		 RESULT = new Less(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(11/*compOp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolExp ::= boolExp OR boolExp 
            {
              Object RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new CompExp((BoolOp) new Or(), (Exp) b1, (Exp) b2); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(9/*boolExp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boolExp ::= boolExp AND boolExp 
            {
              Object RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new CompExp((BoolOp) new And(), (Exp) b1, (Exp) b2); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(9/*boolExp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boolExp ::= LPAREN boolExp RPAREN 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = b; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(9/*boolExp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // boolExp ::= expression compOp expression 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new CompExp((BoolOp) o, (Exp) a1, (Exp) a2); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(9/*boolExp*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // secDomain ::= LOW 
            {
              Object RESULT = null;
		 RESULT = new LowSec(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(15/*secDomain*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // secDomain ::= HIGH 
            {
              Object RESULT = null;
		 RESULT = new HighSec(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(15/*secDomain*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= BOOL 
            {
              Object RESULT = null;
		 RESULT = new BooleanType(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INT 
            {
              Object RESULT = null;
		 RESULT = new IntegerType(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(14/*type*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arrDecl ::= identifier COLON type LSQBRACK identifier RSQBRACK COLON secDomain 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new ArrDecl((Identifier) i, (Identifier) l, (Type) t, (SecDomain) s); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(6/*arrDecl*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arrDecl ::= identifier COLON type LSQBRACK NUMBER RSQBRACK COLON secDomain 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new ArrDecl((Identifier) i, l.intValue(), (Type) t, (SecDomain) s); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(6/*arrDecl*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varDecl ::= identifier COLON type COLON secDomain 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new VarDecl((Identifier) i, (Type) t, (SecDomain) s); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl ::= arrDecl 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = a; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // decl ::= varDecl 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = v; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operator ::= DIV 
            {
              Object RESULT = null;
		 RESULT = new Div(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(10/*operator*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operator ::= MOD 
            {
              Object RESULT = null;
		 RESULT = new Modulus(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(10/*operator*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operator ::= TIMES 
            {
              Object RESULT = null;
		 RESULT = new Times(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(10/*operator*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operator ::= MINUS 
            {
              Object RESULT = null;
		 RESULT = new Minus(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(10/*operator*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operator ::= PLUS 
            {
              Object RESULT = null;
		 RESULT = new Plus(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(10/*operator*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arrField ::= IDENTIFIER LSQBRACK expression RSQBRACK 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new ArrField(i, (Exp) e); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(13/*arrField*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // atom ::= identifier 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = i; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atom ::= arrField 
            {
              Object RESULT = null;
		int afleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int afright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = af; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atom ::= USER LBRACE IDENTIFIER COMMA NUMBER COLON NUMBER RBRACE 
            {
              Object RESULT = null;
		int descleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new Int(n1.intValue(), n2.intValue(), desc, true); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atom ::= USER LBRACE IDENTIFIER COMMA NUMBER RBRACE 
            {
              Object RESULT = null;
		int descleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int descright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new Int(n.intValue(), n.intValue(), desc, true); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atom ::= IDENTIFIER PERIOD LENGTH 
            {
              Object RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		 RESULT = new ArrLength(arr); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atom ::= FALSE 
            {
              Object RESULT = null;
		 RESULT = new False(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atom ::= TRUE 
            {
              Object RESULT = null;
		 RESULT = new True(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atom ::= NUMBER 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new Int(n.intValue(), n.intValue(), null, false); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(12/*atom*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = e; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression operator expression 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new ArithExp((Operator) o, (Exp) e1, (Exp) e2); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= atom 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = a; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(8/*expression*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifier ::= IDENTIFIER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new Identifier(i); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(7/*identifier*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= FORK LPAREN program LESS progVector GREATER RPAREN 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).value;
		int pvleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object pv = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		 RESULT = new Fork((Program) p, (ProgramVector) pv); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= WHILE boolExp DO program END 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new While((BoolExp) e, (Program) p); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command ::= IF boolExp THEN program END 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new If((BoolExp) b, (Program) p); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command ::= IF boolExp THEN program ELSE program END 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		 RESULT = new If((BoolExp) b, (Program) p1, (Program) p2); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // command ::= decl 
            {
              Object RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = d; 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // command ::= arrField ASSIGN expression 
            {
              Object RESULT = null;
		int afleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int afright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object af = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new Assign((ArrField) af, (Exp) e); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // command ::= identifier ASSIGN expression 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 RESULT = new Assign((Identifier) i, (Exp) e); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= SKIP 
            {
              Object RESULT = null;
		 RESULT = new Skip(); 
              CUP$MWLParser$result = new java_cup.runtime.Symbol(3/*command*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= command 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
		 Program program = new Program((Command) c);
					((Command) c).setLineNumber(cleft);
					RESULT = program;
				
              CUP$MWLParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).value;
		RESULT = start_val;
              CUP$MWLParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MWLParser$parser.done_parsing();
          return CUP$MWLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= command SEMI program 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).value;
			Program program = new Program((Command) c, (Program) p);
					((Command) c).setLineNumber(cleft);
					RESULT = program;
				
              CUP$MWLParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MWLParser$stack.elementAt(CUP$MWLParser$top-0)).right, RESULT);
            }
          return CUP$MWLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

